import { NestFactory } from '@nestjs/core';
import { AppModule } from '@/app.module';
import { AuthService } from '@/modules/auth/auth.service';
import { RegisterDto } from '@/modules/auth/dto/register.dto';
import { RegisterResponseDto } from '@/modules/auth/dto/register-response.dto';
import * as readline from 'readline';

interface CreateUserOptions {
  email?: string;
  name?: string;
  password?: string;
  projectUuid?: string;
  roleUuid?: string;
  interactive?: boolean;
}

async function createUserCommand(options: CreateUserOptions = {}) {
  const app = await NestFactory.createApplicationContext(AppModule, {
    logger: ['error', 'warn'],
  });

  const authService = app.get(AuthService);

  try {
    let userData: RegisterDto;

    if (options.interactive !== false) {
      userData = await promptForUserData(options);
    } else {
      if (!options.email || !options.name || !options.password) {
        console.error(
          '‚ùå –î–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email, name –∏ password',
        );
        process.exit(1);
      }
      userData = {
        email: options.email,
        name: options.name,
        password: options.password,
        projectUuid: options.projectUuid,
        roleUuid: options.roleUuid,
      };
    }

    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const result: RegisterResponseDto = await authService.register(userData);

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log(`üìß Email: ${result.user.email}`);
    console.log(`üë§ –ò–º—è: ${result.user.name}`);
    console.log(`üîë UUID: ${result.user.uuid}`);
    console.log(`üè¢ –ü—Ä–æ–µ–∫—Ç: ${result.user.projectUuid || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(
      `üëî –†–æ–ª—å: ${result.user.role?.type || result.user.role || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`,
    );
    console.log(
      `üìÖ –°–æ–∑–¥–∞–Ω: ${
        result.user.createdAt
          ? new Date(result.user.createdAt).toISOString()
          : new Date().toISOString()
      }`,
    );
  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    if (error && typeof error === 'object' && 'response' in error) {
      const nestError = error as {
        response?: {
          error?: {
            code?: string;
            message?: string;
            details?: string[];
          };
        };
      };
      if (nestError.response?.error) {
        console.error(`   –ö–æ–¥: ${nestError.response.error.code || 'N/A'}`);
        console.error(
          `   –°–æ–æ–±—â–µ–Ω–∏–µ: ${nestError.response.error.message || 'N/A'}`,
        );
        if (
          nestError.response.error.details &&
          Array.isArray(nestError.response.error.details) &&
          nestError.response.error.details.length > 0
        ) {
          console.error(
            `   –î–µ—Ç–∞–ª–∏: ${nestError.response.error.details.join(', ')}`,
          );
        }
      }
    } else if (error instanceof Error) {
      console.error(`   ${error.message}`);
    } else {
      console.error(`   ${String(error)}`);
    }
    process.exit(1);
  } finally {
    await app.close();
  }
}

async function promptForUserData(
  initialOptions: CreateUserOptions,
): Promise<RegisterDto> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> => {
    return new Promise((resolve) => {
      rl.question(prompt, resolve);
    });
  };

  try {
    const email =
      initialOptions.email || (await question('üìß Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '));
    const name =
      initialOptions.name || (await question('üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤ÔøΩÔøΩ—Ç–µ–ª—è: '));

    let password = initialOptions.password;
    if (!password) {
      password = await question(
        'üîê –ü–∞—Ä–æ–ª—å (–º–∏–Ω. 8 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü. ÔøΩÔøΩ–∏–º–≤–æ–ª—ã): ',
      );
    }

    const projectUuid =
      initialOptions.projectUuid ||
      (await question(
        'üè¢ UUID –ø—Ä–æ–µ–∫—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–ΩÔøΩÔøΩ—è): ',
      )) ||
      undefined;
    const roleUuid =
      initialOptions.roleUuid ||
      (await question(
        'üëî UUID —Ä–æ–ª–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ä–æ–ª–∏ USER –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ',
      )) ||
      undefined;

    return {
      email,
      name,
      password,
      projectUuid,
      roleUuid,
    };
  } finally {
    rl.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs(): CreateUserOptions {
  const args = process.argv.slice(2);
  const options: CreateUserOptions = {};

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    switch (arg) {
      case '--email':
        options.email = args[++i];
        break;
      case '--name':
        options.name = args[++i];
        break;
      case '--password':
        options.password = args[++i];
        break;
      case '--project':
        options.projectUuid = args[++i];
        break;
      case '--role':
        options.roleUuid = args[++i];
        break;
      case '--non-interactive':
        options.interactive = false;
        break;
      case '--help':
        printHelp();
        process.exit(0);
        break;
      default:
        if (arg.startsWith('--')) {
          console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: ${arg}`);
          printHelp();
          process.exit(1);
        }
        break;
    }
  }

  return options;
}

function printHelp() {
  console.log(`
üìã –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  pnpm user:create [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --email <email>        Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  --name <name>          –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
  --password <password>  –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  --project <uuid>       UUID –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  --role <uuid>          UUID —Ä–æ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  --non-interactive      –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å email, name, password)
  --help                 –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  pnpm user:create

  # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  pnpm user:create --email admin@example.com --name "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" --password "SecurePass123!" --non-interactive

  # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ä–æ–ª–∏
  pnpm user:create --email user@example.com --name "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" --password "UserPass123!" --project "uuid-here" --role "uuid-here" --non-interactive

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:
  - –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤
  - –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (A-Z)
  - –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã (a-z)
  - –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã (0-9)
  - –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (@$!%*?&)
`);
}

// –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã
if (require.main === module) {
  const options = parseArgs();

  createUserCommand(options).catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { createUserCommand };
